/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ezbake.frack;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class StreamEvent implements org.apache.thrift.TBase<StreamEvent, StreamEvent._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("StreamEvent");

  private static final org.apache.thrift.protocol.TField DATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("dateTime", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField AUTHORIZATION_FIELD_DESC = new org.apache.thrift.protocol.TField("authorization", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField ORIGIN_FIELD_DESC = new org.apache.thrift.protocol.TField("origin", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("content", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new StreamEventStandardSchemeFactory());
    schemes.put(TupleScheme.class, new StreamEventTupleSchemeFactory());
  }

  public String dateTime; // required
  public String authorization; // optional
  public String origin; // optional
  public ByteBuffer content; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DATE_TIME((short)1, "dateTime"),
    AUTHORIZATION((short)2, "authorization"),
    ORIGIN((short)3, "origin"),
    CONTENT((short)4, "content");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DATE_TIME
          return DATE_TIME;
        case 2: // AUTHORIZATION
          return AUTHORIZATION;
        case 3: // ORIGIN
          return ORIGIN;
        case 4: // CONTENT
          return CONTENT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.AUTHORIZATION,_Fields.ORIGIN};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("dateTime", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AUTHORIZATION, new org.apache.thrift.meta_data.FieldMetaData("authorization", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORIGIN, new org.apache.thrift.meta_data.FieldMetaData("origin", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONTENT, new org.apache.thrift.meta_data.FieldMetaData("content", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(StreamEvent.class, metaDataMap);
  }

  public StreamEvent() {
  }

  public StreamEvent(
    String dateTime,
    ByteBuffer content)
  {
    this();
    this.dateTime = dateTime;
    this.content = content;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public StreamEvent(StreamEvent other) {
    if (other.isSetDateTime()) {
      this.dateTime = other.dateTime;
    }
    if (other.isSetAuthorization()) {
      this.authorization = other.authorization;
    }
    if (other.isSetOrigin()) {
      this.origin = other.origin;
    }
    if (other.isSetContent()) {
      this.content = org.apache.thrift.TBaseHelper.copyBinary(other.content);
;
    }
  }

  public StreamEvent deepCopy() {
    return new StreamEvent(this);
  }

  @Override
  public void clear() {
    this.dateTime = null;
    this.authorization = null;
    this.origin = null;
    this.content = null;
  }

  public String getDateTime() {
    return this.dateTime;
  }

  public StreamEvent setDateTime(String dateTime) {
    this.dateTime = dateTime;
    return this;
  }

  public void unsetDateTime() {
    this.dateTime = null;
  }

  /** Returns true if field dateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetDateTime() {
    return this.dateTime != null;
  }

  public void setDateTimeIsSet(boolean value) {
    if (!value) {
      this.dateTime = null;
    }
  }

  public String getAuthorization() {
    return this.authorization;
  }

  public StreamEvent setAuthorization(String authorization) {
    this.authorization = authorization;
    return this;
  }

  public void unsetAuthorization() {
    this.authorization = null;
  }

  /** Returns true if field authorization is set (has been assigned a value) and false otherwise */
  public boolean isSetAuthorization() {
    return this.authorization != null;
  }

  public void setAuthorizationIsSet(boolean value) {
    if (!value) {
      this.authorization = null;
    }
  }

  public String getOrigin() {
    return this.origin;
  }

  public StreamEvent setOrigin(String origin) {
    this.origin = origin;
    return this;
  }

  public void unsetOrigin() {
    this.origin = null;
  }

  /** Returns true if field origin is set (has been assigned a value) and false otherwise */
  public boolean isSetOrigin() {
    return this.origin != null;
  }

  public void setOriginIsSet(boolean value) {
    if (!value) {
      this.origin = null;
    }
  }

  public byte[] getContent() {
    setContent(org.apache.thrift.TBaseHelper.rightSize(content));
    return content == null ? null : content.array();
  }

  public ByteBuffer bufferForContent() {
    return content;
  }

  public StreamEvent setContent(byte[] content) {
    setContent(content == null ? (ByteBuffer)null : ByteBuffer.wrap(content));
    return this;
  }

  public StreamEvent setContent(ByteBuffer content) {
    this.content = content;
    return this;
  }

  public void unsetContent() {
    this.content = null;
  }

  /** Returns true if field content is set (has been assigned a value) and false otherwise */
  public boolean isSetContent() {
    return this.content != null;
  }

  public void setContentIsSet(boolean value) {
    if (!value) {
      this.content = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case DATE_TIME:
      if (value == null) {
        unsetDateTime();
      } else {
        setDateTime((String)value);
      }
      break;

    case AUTHORIZATION:
      if (value == null) {
        unsetAuthorization();
      } else {
        setAuthorization((String)value);
      }
      break;

    case ORIGIN:
      if (value == null) {
        unsetOrigin();
      } else {
        setOrigin((String)value);
      }
      break;

    case CONTENT:
      if (value == null) {
        unsetContent();
      } else {
        setContent((ByteBuffer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case DATE_TIME:
      return getDateTime();

    case AUTHORIZATION:
      return getAuthorization();

    case ORIGIN:
      return getOrigin();

    case CONTENT:
      return getContent();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case DATE_TIME:
      return isSetDateTime();
    case AUTHORIZATION:
      return isSetAuthorization();
    case ORIGIN:
      return isSetOrigin();
    case CONTENT:
      return isSetContent();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof StreamEvent)
      return this.equals((StreamEvent)that);
    return false;
  }

  public boolean equals(StreamEvent that) {
    if (that == null)
      return false;

    boolean this_present_dateTime = true && this.isSetDateTime();
    boolean that_present_dateTime = true && that.isSetDateTime();
    if (this_present_dateTime || that_present_dateTime) {
      if (!(this_present_dateTime && that_present_dateTime))
        return false;
      if (!this.dateTime.equals(that.dateTime))
        return false;
    }

    boolean this_present_authorization = true && this.isSetAuthorization();
    boolean that_present_authorization = true && that.isSetAuthorization();
    if (this_present_authorization || that_present_authorization) {
      if (!(this_present_authorization && that_present_authorization))
        return false;
      if (!this.authorization.equals(that.authorization))
        return false;
    }

    boolean this_present_origin = true && this.isSetOrigin();
    boolean that_present_origin = true && that.isSetOrigin();
    if (this_present_origin || that_present_origin) {
      if (!(this_present_origin && that_present_origin))
        return false;
      if (!this.origin.equals(that.origin))
        return false;
    }

    boolean this_present_content = true && this.isSetContent();
    boolean that_present_content = true && that.isSetContent();
    if (this_present_content || that_present_content) {
      if (!(this_present_content && that_present_content))
        return false;
      if (!this.content.equals(that.content))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(StreamEvent other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    StreamEvent typedOther = (StreamEvent)other;

    lastComparison = Boolean.valueOf(isSetDateTime()).compareTo(typedOther.isSetDateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dateTime, typedOther.dateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAuthorization()).compareTo(typedOther.isSetAuthorization());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAuthorization()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authorization, typedOther.authorization);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrigin()).compareTo(typedOther.isSetOrigin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrigin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.origin, typedOther.origin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContent()).compareTo(typedOther.isSetContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.content, typedOther.content);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("StreamEvent(");
    boolean first = true;

    sb.append("dateTime:");
    if (this.dateTime == null) {
      sb.append("null");
    } else {
      sb.append(this.dateTime);
    }
    first = false;
    if (isSetAuthorization()) {
      if (!first) sb.append(", ");
      sb.append("authorization:");
      if (this.authorization == null) {
        sb.append("null");
      } else {
        sb.append(this.authorization);
      }
      first = false;
    }
    if (isSetOrigin()) {
      if (!first) sb.append(", ");
      sb.append("origin:");
      if (this.origin == null) {
        sb.append("null");
      } else {
        sb.append(this.origin);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("content:");
    if (this.content == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.content, sb);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (dateTime == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'dateTime' was not present! Struct: " + toString());
    }
    if (content == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'content' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class StreamEventStandardSchemeFactory implements SchemeFactory {
    public StreamEventStandardScheme getScheme() {
      return new StreamEventStandardScheme();
    }
  }

  private static class StreamEventStandardScheme extends StandardScheme<StreamEvent> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, StreamEvent struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.dateTime = iprot.readString();
              struct.setDateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // AUTHORIZATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.authorization = iprot.readString();
              struct.setAuthorizationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ORIGIN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.origin = iprot.readString();
              struct.setOriginIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.content = iprot.readBinary();
              struct.setContentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, StreamEvent struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.dateTime != null) {
        oprot.writeFieldBegin(DATE_TIME_FIELD_DESC);
        oprot.writeString(struct.dateTime);
        oprot.writeFieldEnd();
      }
      if (struct.authorization != null) {
        if (struct.isSetAuthorization()) {
          oprot.writeFieldBegin(AUTHORIZATION_FIELD_DESC);
          oprot.writeString(struct.authorization);
          oprot.writeFieldEnd();
        }
      }
      if (struct.origin != null) {
        if (struct.isSetOrigin()) {
          oprot.writeFieldBegin(ORIGIN_FIELD_DESC);
          oprot.writeString(struct.origin);
          oprot.writeFieldEnd();
        }
      }
      if (struct.content != null) {
        oprot.writeFieldBegin(CONTENT_FIELD_DESC);
        oprot.writeBinary(struct.content);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class StreamEventTupleSchemeFactory implements SchemeFactory {
    public StreamEventTupleScheme getScheme() {
      return new StreamEventTupleScheme();
    }
  }

  private static class StreamEventTupleScheme extends TupleScheme<StreamEvent> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, StreamEvent struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.dateTime);
      oprot.writeBinary(struct.content);
      BitSet optionals = new BitSet();
      if (struct.isSetAuthorization()) {
        optionals.set(0);
      }
      if (struct.isSetOrigin()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetAuthorization()) {
        oprot.writeString(struct.authorization);
      }
      if (struct.isSetOrigin()) {
        oprot.writeString(struct.origin);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, StreamEvent struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.dateTime = iprot.readString();
      struct.setDateTimeIsSet(true);
      struct.content = iprot.readBinary();
      struct.setContentIsSet(true);
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.authorization = iprot.readString();
        struct.setAuthorizationIsSet(true);
      }
      if (incoming.get(1)) {
        struct.origin = iprot.readString();
        struct.setOriginIsSet(true);
      }
    }
  }

}

